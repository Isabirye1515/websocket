/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { type ComponentProps } from 'react';
import PropTypes from 'prop-types';
type HeaderMenuButtonBaseProps = Omit<ComponentProps<'button'>, 'title' | 'type'>;
export interface HeaderMenuButtonProps extends HeaderMenuButtonBaseProps {
    'aria-label'?: string;
    'aria-labelledby'?: string;
    className?: string;
    renderMenuIcon?: JSX.Element;
    renderCloseIcon?: JSX.Element;
    isActive?: boolean;
    isCollapsible?: boolean;
}
declare function HeaderMenuButton({ 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledBy, className: customClassName, renderMenuIcon, renderCloseIcon, isActive, isCollapsible, ...rest }: HeaderMenuButtonProps): import("react/jsx-runtime").JSX.Element;
declare namespace HeaderMenuButton {
    var propTypes: {
        /**
         * Optionally provide a custom class name that is applied to the underlying
         * button
         */
        className: PropTypes.Requireable<string>;
        /**
         * Specify whether the menu button is "active".
         */
        isActive: PropTypes.Requireable<boolean>;
        /**
         * Specify whether the menu button is collapsible.
         */
        isCollapsible: PropTypes.Requireable<boolean>;
        /**
         * Optionally provide an onClick handler that is called when the underlying
         * button fires it's onclick event
         */
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        0: string;
        length: 1;
        toString(): string;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string;
        pop(): string | undefined;
        push(...items: string[]): number;
        concat(...items: ConcatArray<string>[]): string[];
        concat(...items: (string | ConcatArray<string>)[]): string[];
        join(separator?: string): string;
        reverse(): string[];
        shift(): string | undefined;
        slice(start?: number, end?: number): string[];
        sort(compareFn?: ((a: string, b: string) => number) | undefined): [key: string];
        splice(start: number, deleteCount?: number): string[];
        splice(start: number, deleteCount: number, ...items: string[]): string[];
        unshift(...items: string[]): number;
        indexOf(searchElement: string, fromIndex?: number): number;
        lastIndexOf(searchElement: string, fromIndex?: number): number;
        every<S extends string>(predicate: (value: string, index: number, array: string[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any): U[];
        filter<S extends string>(predicate: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S[];
        filter(predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string[];
        reduce(callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string;
        reduce(callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string;
        reduce<U>(callbackfn: (previousValue: U, currentValue: string, currentIndex: number, array: string[]) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string;
        reduceRight(callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: string, currentIndex: number, array: string[]) => U, initialValue: U): U;
        find<S extends string>(predicate: (value: string, index: number, obj: string[]) => value is S, thisArg?: any): S | undefined;
        find(predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): string | undefined;
        findIndex(predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): number;
        fill(value: string, start?: number, end?: number): [key: string];
        copyWithin(target: number, start: number, end?: number): [key: string];
        entries(): ArrayIterator<[number, string]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<string>;
        includes(searchElement: string, fromIndex?: number): boolean;
        flatMap<U, This = undefined>(callback: (this: This, value: string, index: number, array: string[]) => U | readonly U[], thisArg?: This | undefined): U[];
        flat<A, D extends number = 1>(this: A, depth?: D | undefined): FlatArray<A, D>[];
        at(index: number): string | undefined;
        findLast<S extends string>(predicate: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S | undefined;
        findLast(predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string | undefined;
        findLastIndex(predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): number;
        toReversed(): string[];
        toSorted(compareFn?: ((a: string, b: string) => number) | undefined): string[];
        toSpliced(start: number, deleteCount: number, ...items: string[]): string[];
        toSpliced(start: number, deleteCount?: number): string[];
        with(index: number, value: string): string[];
        [Symbol.iterator](): ArrayIterator<string>;
        [Symbol.unscopables]: {
            [x: number]: boolean | undefined;
            length?: boolean | undefined;
            toString?: boolean | undefined;
            toLocaleString?: boolean | undefined;
            pop?: boolean | undefined;
            push?: boolean | undefined;
            concat?: boolean | undefined;
            join?: boolean | undefined;
            reverse?: boolean | undefined;
            shift?: boolean | undefined;
            slice?: boolean | undefined;
            sort?: boolean | undefined;
            splice?: boolean | undefined;
            unshift?: boolean | undefined;
            indexOf?: boolean | undefined;
            lastIndexOf?: boolean | undefined;
            every?: boolean | undefined;
            some?: boolean | undefined;
            forEach?: boolean | undefined;
            map?: boolean | undefined;
            filter?: boolean | undefined;
            reduce?: boolean | undefined;
            reduceRight?: boolean | undefined;
            find?: boolean | undefined;
            findIndex?: boolean | undefined;
            fill?: boolean | undefined;
            copyWithin?: boolean | undefined;
            entries?: boolean | undefined;
            keys?: boolean | undefined;
            values?: boolean | undefined;
            includes?: boolean | undefined;
            flatMap?: boolean | undefined;
            flat?: boolean | undefined;
            at?: boolean | undefined;
            findLast?: boolean | undefined;
            findLastIndex?: boolean | undefined;
            toReversed?: boolean | undefined;
            toSorted?: boolean | undefined;
            toSpliced?: boolean | undefined;
            with?: boolean | undefined;
            [Symbol.iterator]?: boolean | undefined;
            readonly [Symbol.unscopables]?: boolean | undefined;
        };
    };
}
export default HeaderMenuButton;
