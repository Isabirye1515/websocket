/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React from 'react';
import PropTypes from 'prop-types';
/**
 * `HeaderMenu` is used to render submenu's in the `Header`. Most often children
 * will be a `HeaderMenuItem`. It handles certain keyboard events to help
 * with managing focus. It also passes along refs to each child so that it can
 * help manage focus state of its children.
 */
export interface HeaderMenuProps {
    /**
     * Required props for the accessibility label of the menu
     */
    'aria-label'?: string;
    'aria-labelledby'?: string;
    /**
     * Optionally provide a custom class to apply to the underlying `<li>` node
     */
    className?: string;
    /**
     * Provide a custom ref handler for the menu button
     */
    focusRef?: React.Ref<any>;
    /**
     * Applies selected styles to the item if a user sets this to true and `aria-current !== 'page'`.
     */
    isActive?: boolean;
    /**
     * Applies selected styles to the item if a user sets this to true and `aria-current !== 'page'`.
     * @deprecated Please use `isActive` instead. This will be removed in the next major release.
     */
    isCurrentPage?: boolean;
    /**
     * Provide a label for the link text
     */
    menuLinkName: string;
    /**
     * Optionally provide an onBlur handler that is called when the underlying
     * button fires it's onblur event
     */
    onBlur?: (event: React.FocusEvent<HTMLLIElement>) => void;
    /**
     * Optionally provide an onClick handler that is called when the underlying
     * button fires it's onclick event
     */
    onClick?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
    /**
     * Optionally provide an onKeyDown handler that is called when the underlying
     * button fires it's onkeydown event
     */
    onKeyDown?: (event: React.KeyboardEvent<HTMLLIElement>) => void;
    /**
     * Optional component to render instead of string
     */
    renderMenuContent?: () => JSX.Element;
    /**
     * Optionally provide a tabIndex for the underlying menu button
     */
    tabIndex?: number;
    /**
     * The children should be a series of `HeaderMenuItem` components.
     */
    children?: React.ReactNode;
}
interface HeaderMenuState {
    expanded: boolean;
    selectedIndex: number | null;
}
declare class HeaderMenu extends React.Component<HeaderMenuProps, HeaderMenuState> {
    static propTypes: {
        /**
         * Optionally provide a custom class to apply to the underlying `<li>` node
         */
        className: PropTypes.Requireable<string>;
        /**
         * Provide a custom ref handler for the menu button
         */
        focusRef: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Applies selected styles to the item if a user sets this to true and `aria-current !== 'page'`.
         */
        isActive: PropTypes.Requireable<boolean>;
        /**
         * Applies selected styles to the item if a user sets this to true and `aria-current !== 'page'`.
         * @deprecated Please use `isActive` instead. This will be removed in the next major release.
         */
        isCurrentPage: (props: any, propName: any, componentName: any, ...rest: any[]) => any;
        /**
         * Provide a label for the link text
         */
        menuLinkName: PropTypes.Validator<string>;
        /**
         * Optionally provide an onBlur handler that is called when the underlying
         * button fires it's onblur event
         */
        onBlur: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Optionally provide an onClick handler that is called when the underlying
         * button fires it's onclick event
         */
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Optionally provide an onKeyDown handler that is called when the underlying
         * button fires it's onkeydown event
         */
        onKeyDown: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Optional component to render instead of string
         */
        renderMenuContent: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Optionally provide a tabIndex for the underlying menu button
         */
        tabIndex: PropTypes.Requireable<number>;
        0: string;
        length: 1;
        toString(): string;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string;
        pop(): string | undefined;
        push(...items: string[]): number;
        concat(...items: ConcatArray<string>[]): string[];
        concat(...items: (string | ConcatArray<string>)[]): string[];
        join(separator?: string): string;
        reverse(): string[];
        shift(): string | undefined;
        slice(start?: number, end?: number): string[];
        sort(compareFn?: ((a: string, b: string) => number) | undefined): [key: string];
        splice(start: number, deleteCount?: number): string[];
        splice(start: number, deleteCount: number, ...items: string[]): string[];
        unshift(...items: string[]): number;
        indexOf(searchElement: string, fromIndex?: number): number;
        lastIndexOf(searchElement: string, fromIndex?: number): number;
        every<S extends string>(predicate: (value: string, index: number, array: string[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any): U[];
        filter<S extends string>(predicate: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S[];
        filter(predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string[];
        reduce(callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string;
        reduce(callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string;
        reduce<U>(callbackfn: (previousValue: U, currentValue: string, currentIndex: number, array: string[]) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string;
        reduceRight(callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: string, currentIndex: number, array: string[]) => U, initialValue: U): U;
        find<S extends string>(predicate: (value: string, index: number, obj: string[]) => value is S, thisArg?: any): S | undefined;
        find(predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): string | undefined;
        findIndex(predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): number;
        fill(value: string, start?: number, end?: number): [key: string];
        copyWithin(target: number, start: number, end?: number): [key: string];
        entries(): ArrayIterator<[number, string]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<string>;
        includes(searchElement: string, fromIndex?: number): boolean;
        flatMap<U, This = undefined>(callback: (this: This, value: string, index: number, array: string[]) => U | readonly U[], thisArg?: This | undefined): U[];
        flat<A, D extends number = 1>(this: A, depth?: D | undefined): FlatArray<A, D>[];
        at(index: number): string | undefined;
        findLast<S extends string>(predicate: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S | undefined;
        findLast(predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string | undefined;
        findLastIndex(predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): number;
        toReversed(): string[];
        toSorted(compareFn?: ((a: string, b: string) => number) | undefined): string[];
        toSpliced(start: number, deleteCount: number, ...items: string[]): string[];
        toSpliced(start: number, deleteCount?: number): string[];
        with(index: number, value: string): string[];
        [Symbol.iterator](): ArrayIterator<string>;
        [Symbol.unscopables]: {
            [x: number]: boolean | undefined;
            length?: boolean | undefined;
            toString?: boolean | undefined;
            toLocaleString?: boolean | undefined;
            pop?: boolean | undefined;
            push?: boolean | undefined;
            concat?: boolean | undefined;
            join?: boolean | undefined;
            reverse?: boolean | undefined;
            shift?: boolean | undefined;
            slice?: boolean | undefined;
            sort?: boolean | undefined;
            splice?: boolean | undefined;
            unshift?: boolean | undefined;
            indexOf?: boolean | undefined;
            lastIndexOf?: boolean | undefined;
            every?: boolean | undefined;
            some?: boolean | undefined;
            forEach?: boolean | undefined;
            map?: boolean | undefined;
            filter?: boolean | undefined;
            reduce?: boolean | undefined;
            reduceRight?: boolean | undefined;
            find?: boolean | undefined;
            findIndex?: boolean | undefined;
            fill?: boolean | undefined;
            copyWithin?: boolean | undefined;
            entries?: boolean | undefined;
            keys?: boolean | undefined;
            values?: boolean | undefined;
            includes?: boolean | undefined;
            flatMap?: boolean | undefined;
            flat?: boolean | undefined;
            at?: boolean | undefined;
            findLast?: boolean | undefined;
            findLastIndex?: boolean | undefined;
            toReversed?: boolean | undefined;
            toSorted?: boolean | undefined;
            toSpliced?: boolean | undefined;
            with?: boolean | undefined;
            [Symbol.iterator]?: boolean | undefined;
            readonly [Symbol.unscopables]?: boolean | undefined;
        };
    };
    static contextType: React.Context<string>;
    _subMenus: React.RefObject<HTMLUListElement>;
    private items;
    private menuButtonRef;
    constructor(props: any);
    /**
     * Toggle the expanded state of the menu on click.
     */
    handleOnClick: (e: any) => void;
    /**
     * Keyboard event handler for the entire menu.
     */
    handleOnKeyDown: (event: any) => void;
    /**
     * Handle our blur event from our underlying menuitems. Will mostly be used
     * for closing our menu in response to a user clicking off or tabbing out of
     * the menu or menubar.
     */
    handleOnBlur: (event: any) => void;
    /**
     * ref handler for our menu button. If we are supplied a `focusRef` prop, we also
     * forward along the node.
     *
     * This is useful when this component is a child in a
     * menu or menubar as it will allow the parent to explicitly focus the menu
     * button node when that child should receive focus.
     */
    handleMenuButtonRef: (node: any) => void;
    /**
     * Handles individual menuitem refs. We assign them to a class instance
     * property so that we can properly manage focus of our children.
     */
    handleItemRef: (index: any) => (node: any) => void;
    handleMenuClose: (event: any) => void;
    render(): import("react/jsx-runtime").JSX.Element;
    /**
     * We capture the `ref` for each child inside of `this.items` to properly
     * manage focus. In addition to this focus management, all items receive a
     * `tabIndex: -1` so the user won't hit a large number of items in their tab
     * sequence when they might not want to go through all the items.
     */
    _renderMenuItem: (item: React.ReactNode, index: number) => React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
}
declare const HeaderMenuForwardRef: React.ForwardRefExoticComponent<HeaderMenuProps & React.RefAttributes<unknown>>;
export { HeaderMenu };
export default HeaderMenuForwardRef;
